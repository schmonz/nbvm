PKGBUILD_BITNESS?=	${ABI}
PKGBUILD_COMPILER?=	${CC_VERSION}
PKGBUILD_PREFIX=	${PREFIX:C/^\///:C/\//-/g}

# platform identification
.if ${OPSYS} == "Linux"
. if exists(/usr/bin/lsb_release)
PKGBUILD_PLATFORM_cmd=	lsb_release -sd | ${SED} -e 's|^"||' -e 's|"$$||' -e 's| Linux release||g' -e 's| (.\+)$$||' -e 's|||g' -e 's|GNU/Linux ||' -e 's| |-|g'
. elif exists(/etc/gentoo-release)
PKGBUILD_PLATFORM_cmd=	${CAT} /etc/gentoo-release | ${SED} -e 's| .* |-|'
. elif exists(/etc/os-release)
PKGBUILD_PLATFORM_cmd=	${CAT} /etc/os-release | ${GREP} ^PRETTY_NAME= | ${SED} -e 's|^.*="||' -e 's|"$$||' -e 's|Linux v||' -e 's| |-|g'
. else
PKGBUILD_PLATFORM_cmd=	${ECHO} UnknownLinux-x.x
. endif
.elif ${OPSYS} == "Darwin"
PKGBUILD_PLATFORM_cmd=	${ECHO} macOS-${OSX_VERSION}
CC_VERSION_FIXUP_cmd=	${ECHO} ${CC_VERSION:Q} | ${SED} -e 's| .*||'
PKGBUILD_COMPILER=	${CC_VERSION_FIXUP_cmd:sh}
.elif ${OPSYS} == "FreeBSD"
PKGBUILD_PLATFORM_cmd=	uname -rs | ${SED} -e 's| |-|g'
CC_VERSION_FIXUP_cmd=	${ECHO} ${CC_VERSION:Q} | ${SED} -e 's| .*||'
PKGBUILD_COMPILER=	${CC_VERSION_FIXUP_cmd:sh}
.elif ${OPSYS} == "SunOS"
. if exists (/etc/product) # SmartOS
_PKGBUILD_OPSYS_cmd=	${HEAD} -1 /etc/release | ${AWK} '{print $$1}'
_PKGBUILD_VERSION_cmd=	${GREP} '^Image:' < /etc/product | ${AWK} '{print $$3}'
PKGBUILD_PLATFORM_cmd=	${ECHO} ${_PKGBUILD_OPSYS_cmd:sh}-${_PKGBUILD_VERSION_cmd:sh}
. else
PKGBUILD_PLATFORM_cmd=	${CAT} /etc/release
. endif
.else
PKGBUILD_PLATFORM_cmd=	uname -rs | ${SED} -e 's| |-|g'
.endif
PKGBUILD_PLATFORM=	${PKGBUILD_PLATFORM_cmd:sh}-${MACHINE_ARCH}-${PKGBUILD_BITNESS}-${PKGBUILD_PREFIX}-${PKGBUILD_COMPILER}
# XXX can we also build to this physical prefix?

# per-package build concurrency
MAKE_JOBS_DEFAULT_cmd=	pkgbuild-ncpus
MAKE_JOBS_DEFAULT?=	${MAKE_JOBS_DEFAULT_cmd:sh}
MAKE_JOBS=		${PKG_MAKE_JOBS.${PKGPATH}:U${MAKE_JOBS_DEFAULT}}

# bootstrap settings
LOCALBASE?=		/opt/pkg
VARBASE?=		/var/pkg
PKG_SYSCONFBASE?=	/etc/pkg
PKG_DBDIR=		${LOCALBASE}/pkgdb
PKG_TOOLS_BIN=		${LOCALBASE}/sbin
PKGINFODIR=		info
PKGMANDIR=		man
PREFER_PKGSRC=		yes

.if exists(${LOCALBASE}/bin/fetch)
FETCH_USING=		fetch
.endif
PKG_OPTIONS.libfetch+=	openssl

# license
ACCEPTABLE_LICENSES+=	gnu-agpl-v3 vim-license ruby-license

# build actions
PACKAGES=		${PKGSRCDIR}/packages/${PKGBUILD_PLATFORM}
.if exists(/private)	# WRKOBJDIR must not contain any symlinks
WRKOBJDIR?=		/private/var/tmp/pkgsrc/obj
.else
WRKOBJDIR?=		/var/tmp/pkgsrc/obj
.endif
CREATE_WRKDIR_SYMLINK=	yes
# XXX also wanna test that we're actively trying to build shlock or its dependencies right now;
# XXX otherwise bail if shlock isn't present
.if empty(.CURDIR:M*pkgtools/shlock) && exists(${LOCALBASE}/bin/shlock)
PKG_DEVELOPER=		yes
OBJHOSTNAME=		# defined
WRKDIR_LOCKTYPE=	once
LOCALBASE_LOCKTYPE=	sleep
.endif
DEPENDS_TARGET=		install clean
UPDATE_TARGET=		install clean
.if exists(${LOCALBASE}/bin/sudo) || exists(/usr/bin/sudo)
SU_CMD=			sudo ${SH} -c
.endif
# XXX 20220627 schmonz: trying to get pkg_comp going again
#PKGSRC_USE_MKTOOLS=	yes

# build options
PKG_RCD_SCRIPTS=	yes
MANZ=			YES
PKG_DEFAULT_OPTIONS+=	-x11 -xcb -gssapi -kerberos
PKG_OPTIONS.gcc6+=	always-libgcc
PKG_OPTIONS.gcc7+=	always-libgcc
PKG_OPTIONS.gcc8+=	always-libgcc
PKG_OPTIONS.gcc9+=	always-libgcc
PKG_OPTIONS.gcc10+=	always-libgcc
PKG_OPTIONS.ikiwiki+=	cvs git mercurial ikiwiki-amazon-s3 ikiwiki-highlight ikiwiki-search imagemagick l10n python w3m
