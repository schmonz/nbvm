#!/bin/sh

set -e

nb_qemu_arch() {
	arch="$1"; shift
	case "${arch}" in
		amd64|i386|x64|x86)	echo x86_64	;;
		arm64)			echo aarch64	;;
		armv7)			echo arm	;;
		macppc|powerpc)		echo ppc	;;
		*)			echo "${arch}"	;;
	esac
}

nb_qemu_read_guest_config() {
	opsys="$1"; shift
	version="$1"; shift
	arch="$1"; shift

	. "$(dirname "$(realpath "$0")")"/../etc/nbvm-"${opsys}${version}-${arch}"
}

nb_qemu_accel() {
	[ $# -eq 1 ] || nb_usage
	qemu_arch="$1"; shift

	accepted_accels='hvf nvmm hax tcg'
	available_accels="$(qemu-system-${qemu_arch} -accel help | tail +2)"
	for i in ${accepted_accels}; do
		if echo "${available_accels}" | grep -q "^${i}\$"; then
			echo ${i}
			break
		fi
	done
}

nb_ls() {
	(
		cd "$(dirname "$(realpath "$0")")"/../etc
		ls nbvm-* \
			| sed -e 's|^nbvm-||' \
				-e 's|current-| current |' \
				-e 's|\([0-9]*\)-| \1 |' \
			| sort --version-sort
	)
}

_nb_platform_is_known() {
	opsys="$1"; shift
	nb_ls \
		| awk '{print $1}' \
		| sort -u \
		| grep -Fxq "${opsys}"
}

_nb_platform_newest_known() {
	opsys="$1"; shift
	nb_ls \
		| grep -F "${opsys} " \
		| awk '{print $2}' \
		| sort -nru \
		| head -1
}

_nb_platform_all_known_arches() {
	opsys="$1"; shift
	version="$1"; shift
	nb ls \
		| grep -F "${opsys} ${version} " \
		| awk '{print $3}'
}

_nb_platform_best_matching_arch() {
	opsys="$1"; shift
	version="$1"; shift
	host_arch="$(nb_qemu_arch "$(uname -m)")"
	for i in $(_nb_platform_all_known_arches "${opsys}" "${version}"); do
		guest_arch="$(nb_qemu_arch "${i}")"
		if [ "${host_arch}" = "${guest_arch}" ]; then
			echo $i
			return
		fi
	done
	nb_qemu_arch amd64
}

# XXX also if there's only one opsys, just do it
_nb_complete() {
	# XXX also filter out platforms that don't have local disks?

	[ $# -ge 1 ] || nb_usage

	opsys="$1"; shift
	_nb_platform_is_known "${opsys}" || nb_usage
	version="$1"; shift || version="$(_nb_platform_newest_known "${opsys}")"
	arch="$1"; shift || arch="$(_nb_platform_best_matching_arch "${opsys}" "${version}")"

	echo "opsys=${opsys}" "version=${version}" "arch=${arch}"
}

nb_boot() {
	[ $# -ge 1 ] || nb_usage
	eval $(_nb_complete "$@"); shift || true; shift || true; shift || true

	# XXX remove never-overridden values from nbvm configs
	QEMU_ARCH="$(nb_qemu_arch "${arch}")"
	nb_qemu_read_guest_config "${opsys}" "${version}" "${arch}"
	[ -n "${QEMU_CPUS}" ] && QEMU_CPUS="-smp ${QEMU_CPUS}"
	[ -n "${QEMU_RAMS}" ] && QEMU_RAMS="-m ${QEMU_RAMS}"
	[ -z "${QEMU_EDRV}" ] && QEMU_EDRV=virtio
	[ -n "${QEMU_MCNE}" ] && QEMU_MCNE="-machine ${QEMU_MCNE}"
	[ -n "${QEMU_BIOS}" ] && QEMU_BIOS="-bios ${QEMU_BIOS}"
	[ -z "${QEMU_DKIF}" ] && QEMU_DKIF=virtio
	[ -z "${QEMU_ACEL}" ] && QEMU_ACEL="$(nb_qemu_accel ${QEMU_ARCH})"
	QEMU_ACEL="-accel ${QEMU_ACEL}"
	QEMU_HOST="$(nb_qemu_arch "$(uname -m)")"
	[ -n "${QEMU_HCPU}" ] && QEMU_HCPU="-cpu ${QEMU_HCPU}"
	[ -z "${QEMU_HCPU}" ] && [ "${QEMU_HOST}" = "${QEMU_ARCH}" ] && QEMU_HCPU='-cpu host'

	cd "$(dirname "$(realpath "$0")")"/../var/disks

	# -device virtio-rng-pci
	eval exec "qemu-system-${QEMU_ARCH} \
		${QEMU_MCNE} \
		${QEMU_BIOS} \
		${QEMU_ACEL} \
		${QEMU_HCPU} \
		${QEMU_CPUS} \
		${QEMU_RAMS} \
		-nodefaults \
		-nographic \
		-serial mon:stdio \
		-drive file=${QEMU_DISK},if=${QEMU_DKIF},format=qcow2,index=0 \
		-nic mac=${QEMU_ENET},model=${QEMU_EDRV},hostfwd=tcp::${QEMU_PORT}-:22,ipv6=off,type=user \
		${QEMU_ARGS}" \
		"$@"
}

nb_sshid() {
	_nb_ssh_thingy ssh-copy-id "$@"
}

nb_sh() {
	_nb_ssh_thingy ssh "$@"
}

_nb_ssh_thingy() {
	[ $# -ge 2 ] || nb_usage
	ssh_thingy="$1"; shift
	eval $(_nb_complete "$@"); shift || true; shift || true; shift || true

	nb_qemu_read_guest_config "${opsys}" "${version}" "${arch}"
	exec "${ssh_thingy}" -p ${QEMU_PORT} localhost "$@"
}

nb_halt() {
	[ $# -eq 3 ] || nb_usage
	nb_sh "$@" '. ~/.profile; nbvm shutdown'
}

nb_usage() {
	echo >&2 "$(basename "$0") ls|boot|sshid|sh|halt opsys version arch"
	exit 1
}

main() {
	[ $# -ge 1 ] || nb_usage
	arg="$1"; shift
	case "${arg}" in
		ls)	nb_ls		"$@"	;;
		boot)	nb_boot		"$@"	;;
		sshid)	nb_sshid	"$@"	;;
		sh)	nb_sh		"$@"	;;
		halt)	nb_halt		"$@"	;;
		*)	nb_usage	"$@"	;;
	esac
}

main "$@"
exit $?
