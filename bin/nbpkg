#!/bin/sh

set -e

NBPKG_TREESDIR=~schmonz/trees
NBPKG_PREFIX=/opt/pkg

as_root() {
	if [ 0 = $(id -u) ]; then
		$@
	else
		sudo $@
	fi
}

nbpkg_expand_symlinks() {
	# adapted from pkgsrc/bootstrap/bootstrap:checkarg_no_symlink_path()
	_dir=$1
	while [ ! -d "$_dir" ]; do
		_dir=`dirname "$_dir"`
		[ "$_dir" ] || _dir="/"
	done

	_realdir=`cd "$_dir" && exec pwd`
	echo "$_realdir${1##${_dir}}"
}

nbpkg_bootstrap() {
	_sysconfdir="/etc/pkg"
	echo ".include \"${_sysconfdir}/nbpkg-shared.mk.conf\"" > /var/tmp/nbpkg-fragment.mk.conf
	cd ${NBPKG_TREESDIR}/pkgsrc-cvs/bootstrap
	as_root ./bootstrap \
		--mk-fragment "$(nbpkg_expand_symlinks /var/tmp/nbpkg-fragment.mk.conf)" \
		--workdir "$(nbpkg_expand_symlinks /var/tmp/pkgsrc-bootstrap)" \
		--varbase "$(nbpkg_expand_symlinks /var/pkg)" \
		--sysconfdir "$(nbpkg_expand_symlinks "${_sysconfdir}")" \
		--sysconfbase "$(nbpkg_expand_symlinks /etc)" \
		--prefix "${NBPKG_PREFIX}" \
		--prefer-pkgsrc yes \
		"$@"
	as_root ln -s ${NBPKG_TREESDIR}/nbvm/etc/nbpkg-shared.mk.conf "${_sysconfdir}"
	warn ""
	warn "=====> $(basename $0): ${_sysconfdir}/mk.conf:"
	warn "=====> keep only ABI, PKGSRC_COMPILER, TOOLS_PLATFORM.foo"
}

nbpkg_listcompilers() {
	for i in $(pkg_info | awk '{print $1}'); do
		echo $(pkg_info -Q CC_VERSION $i)
	done \
	| sort -u \
	| grep -v '^$' \
	| sort -n
}

nbpkg_make() {
	mk=mk/bsd.pkg.mk
	type bmake >/dev/null
	_has_bmake=$([ $? -eq 0 ] && echo yes)
	if [ "${_has_bmake}" ] && [ -f ../../$mk -o -f ../$mk -o -f $mk ]; then
		exec bmake "$@"
	elif [ -x /usr/bin/make ]; then
		exec /usr/bin/make "$@"
	else
		exec bmake "$@"
	fi
}

nbpkg_mancompress() {
	for i in $(find ${NBPKG_PREFIX}/man -type f ! -name '*.gz'); do
		pkg_info -Fe $i
	done | \
	as_root xargs pkg_admin set rebuild=YES
	pkg_rolling-replace -sv
}

nbpkg_moretools() {
	# XXX make this generate a meta-package whose `install` target removes the generated files, leaving no trace
	# XXX or hand-write the meta-package into this repo, then this script symlinks it and unlinks it

	# textproc/highlight, assuming gcc6 or higher
	MORETOOLS='misc/tmux
devel/cvs-for-gits
textproc/p5-Text-Autoformat
textproc/p5-Text-Reform
textproc/the_silver_searcher
devel/myrepos
devel/scmcvs
devel/git-base
devel/mercurial
net/djbdns
net/rsync
editors/vim
misc/watch
shells/oksh
shells/mksh
www/links'

	cd ${NBPKG_TREESDIR}/pkgsrc-cvs
	for i in ${MORETOOLS}; do
		( cd $i && make install clean )
	done
}

SED=sed
CAT=cat
GREP=grep
ECHO=echo
HEAD=head

nbpkg_platform_linux() {
	if [ -x /usr/bin/lsb_release ]; then
		lsb_release -sd | \
			${SED} -e 's|^"||' \
			-e 's|"$||' \
			-e 's| Linux release||g' \
			-e 's| (.\+)$||' \
			-e 's|||g' \
			-e 's|GNU/Linux ||' \
			-e 's| |-|g'
	elif [ -f /etc/gentoo-release ]; then
		${CAT} /etc/gentoo-release | \
			${SED} -e 's| .* |-|'
	elif [ -f /etc/os-release ]; then
		# XXX maybe NAME and VERSION_ID
		${CAT} /etc/os-release | \
			${GREP} ^PRETTY_NAME= | \
			${SED} -e 's|^.*="||' \
			-e 's|"$||' \
			-e 's|Linux v||' \
			-e 's| (.\+)$||' \
			-e 's| |-|g'
	else
		${ECHO} UnknownLinux-x.x
	fi
}

nbpkg_platform_darwin() {
	${ECHO} macOS-"$(sw_vers -productVersion)"
}

nbpkg_platform_freebsd() {
	uname -rs | ${SED} -e 's| |-|g'
}

nbpkg_platform_sunos() {
	if [ -f /etc/product ]; then # SmartOS
		${ECHO} $(${HEAD} -1 /etc/release | ${AWK} '{print $1}')-$(${GREP} '^Image:' < /etc/product | ${AWK} '{print $3}')
	else
		${HEAD} -1 /etc/release | ${SED} -e 's|.*Oracle ||g' -e 's| X86$||' -e 's| |-|g'
	fi
}

nbpkg_platform_generic() {
	uname -rs | ${SED} -e 's| |-|g'
}

nbpkg_platform() {
	case "$(uname)" in
		Linux)	nbpkg_platform_linux	;;
		Darwin)	nbpkg_platform_darwin	;;
		FreeBSD)nbpkg_platform_freebsd	;;
		SunOS)	nbpkg_platform_sunos	;;
		*)	nbpkg_platform_generic	;;
	esac
}

nbpkg_serverpackages_package_rebuild() {
	as_root mkdir -p /var/pkg_comp
	NBPKG_VINTAGE="$(date -u '+%Y%m%d-%H%M%S')"
	as_root env NBPKG_VINTAGE="${NBPKG_VINTAGE}" pkg_comp -c ${NBPKG_TREESDIR}/nbvm/etc/pkgcomp-conf auto "$@"
}

nbpkg_serverpackages_package_upload() {
	LATEST_PACKAGES=$(ls -t $HOME/binaries/packages | head -1)
	ADD_PACKAGES="$(cd $HOME/binaries/packages/${LATEST_PACKAGES}/All >/dev/null && for p in $(echo *.tgz); do if grep -q ^$(pkg_info -Q PKGPATH $p)\$ ${NBPKG_TREESDIR}/nbvm/etc/pkgcomp-autopackages; then echo $p; fi; done)"
	cat >/var/tmp/nbpkg-serverinstall <<EOT
#!/bin/sh

set -e

VINTAGE=$(echo ${LATEST_PACKAGES} | sed -e 's|^.*\([0-9]\{8\}-[0-9]\{6\}\)|\1|')
LATEST_PACKAGES=${LATEST_PACKAGES}
ADD_PACKAGES="${ADD_PACKAGES}"

run_as_root_if_not_already() {
	[ 0 -eq \$(id -u) ] || exec sudo "\$0"
}

pkg_add_everything() {
	pkg_add -K /opt/.pkg-\${VINTAGE}/libdata/pkgdb pkg_install*.tgz
	/opt/.pkg-\${VINTAGE}/sbin/download-vulnerability-list
	/opt/.pkg-\${VINTAGE}/sbin/pkg_add \${ADD_PACKAGES}
}

remove_new_trailing_lines_if_expected() {
	cat /etc/shells \
		| sed -e '\${/\/opt\/\.pkg-'\${VINTAGE}'\/bin\/zsh/d;}' \
		| sed -e '\${/\/opt\/\.pkg-'\${VINTAGE}'\/bin\/bash/d;}' \
		> /etc/shells.SCHMONZ \
		&& mv /etc/shells.SCHMONZ /etc/shells
}

services_to_stop() {
	echo "znc dovecot mysqld qmail redis rspamd tinydyn djbdns"
}

services_to_start() {
	services_to_stop | perl -e '@r=reverse split / /,<>;chomp @r;print(join " ",@r);print "\n"'
}

stop_services() {
	for i in \$(services_to_stop); do
		service \$i stop
	done
}

bless_new_packages() {
	rm ${NBPKG_PREFIX}
	ln -s /opt/.pkg-\${VINTAGE} ${NBPKG_PREFIX}
}

start_services() {
	for i in \$(services_to_start); do
		service \$i start
	done
}

post_upgrade_crap() {
	svc -t /var/service/sniproxy /home/*/service/*
	ikiwiki-mass-rebuild
}

remove_binary_packages() {
	rm -rf ~schmonz/packages/\${LATEST_PACKAGES}
}

remember_to_remove_sufficiently_old_installed_packages() {
	du -sh /opt/.pkg-*
	svstat /home/*/service/*
}

main() {
	cd ~schmonz/packages/\${LATEST_PACKAGES}
	cp build.log /etc/package-rebuild

	cd All
	pkg_add_everything
	remove_new_trailing_lines_if_expected

	stop_services
	bless_new_packages
	start_services

	post_upgrade_crap
	remember_to_remove_sufficiently_old_installed_packages
	remove_binary_packages
}

run_as_root_if_not_already
mkdir -p /etc/package-rebuild
etckeeper commit "package-rebuild: before \${LATEST_PACKAGES}" || true
main "\$@" 2>&1 | tee /etc/package-rebuild/install.log
etckeeper commit "package-rebuild: after \${LATEST_PACKAGES}" || true
exit \$?
EOT
	LATEST_PACKAGES="${HOME}/binaries/packages/${LATEST_PACKAGES}"
	sudo cp /var/tmp/nbpkg-serverinstall ${LATEST_PACKAGES}

	sudo chmod +x ${LATEST_PACKAGES}/nbpkg-serverinstall 
	sudo cp ~schmonz/build.log ${LATEST_PACKAGES}
	rsync -av --delete ${LATEST_PACKAGES} schmonz.com:packages/
	sudo rm -rf ${LATEST_PACKAGES}
}

nbpkg_serverpackages_package_run() {
	local _action _starttime
	_action="$1"
	_starttime=`date`
	nbpkg_serverpackages_package_${_action}

	warn
	warn "${_action} of schmonz.com packages complete"
	warn "Started:  ${_starttime}"
	warn "Finished: `date`"
	warn
}

nbpkg_serverpackages() {
	(
		nbpkg_serverpackages_package_run rebuild "$@"
		# XXX run a periodic rsync during the build, so this becomes short
		nbpkg_serverpackages_package_run upload
	) 2>&1 | tee build.log
}

warn() {
	echo >&2 "$@"
}

nbpkg_usage() {
	warn "$(basename "$0") bootstrap|listcompilers|make|mancompress|moretools|platform|serverpackages"
	exit 1
}

main() {
	[ $# -ge 1 ] || nbpkg_usage
	arg="$1"; shift
	case "${arg}" in
		bootstrap)	nbpkg_bootstrap		"$@"	;;
		listcompilers)	nbpkg_listcompilers	"$@"	;;
		make)		nbpkg_make		"$@"	;;
		mancompress)	nbpkg_mancompress	"$@"	;;
		moretools)	nbpkg_moretools		"$@"	;;
		platform)	nbpkg_platform		"$@"	;;
		serverpackages)	nbpkg_serverpackages	"$@"	;;
		*)		nbpkg_usage		"$@"	;;
	esac
	return $?
}

main "$@"
exit $?
